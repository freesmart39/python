import cv2
import requests
import ipaddress
import os
import socket
from onvif import ONVIFCamera
from urllib3.exceptions import InsecureRequestWarning

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
SCREENSHOTS_DIR = r"D:\temp\screenshots"  # –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
RTSP_PORT = 554  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç RTSP
TIMEOUT = 2  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–µ–∫)
# =====================

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è HTTPS
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)


def load_credentials():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–≥–∏–Ω—ã/–ø–∞—Ä–æ–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞ (–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—É—Ç—å)."""
    while True:
        file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–∞—Ä–æ–ª—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, C:\passwords.txt): ").strip()
        if os.path.exists(file_path):
            break
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    credentials = []
    with open(file_path, 'r') as file:
        for line in file:
            line = line.strip()
            if line and not line.startswith("#"):
                parts = line.split(":")
                if len(parts) == 2:
                    credentials.append((parts[0], parts[1]))
    return credentials


def is_port_open(ip, port):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –ø–æ—Ä—Ç –Ω–∞ IP."""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(TIMEOUT)
    try:
        result = sock.connect_ex((str(ip), port))
        return result == 0
    except Exception:
        return False
    finally:
        sock.close()


def try_rtsp(ip, username, password):
    """–ü—Ä–æ–±—É–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ RTSP."""
    rtsp_urls = [
        f"rtsp://{ip}:{RTSP_PORT}/live",
        f"rtsp://{ip}:{RTSP_PORT}/cam/realmonitor",
        f"rtsp://{ip}:{RTSP_PORT}/Streaming/Channels/1",
    ]

    for url in rtsp_urls:
        auth_url = url.replace("rtsp://", f"rtsp://{username}:{password}@")
        print(f"–ü—Ä–æ–±—É–µ–º RTSP: {auth_url}")
        cap = cv2.VideoCapture(auth_url)
        if cap.isOpened():
            ret, frame = cap.read()
            cap.release()
            if ret:
                screenshot_path = os.path.join(SCREENSHOTS_DIR, f"{ip}_screenshot.jpeg")
                cv2.imwrite(screenshot_path, frame)
                print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {screenshot_path}")
                return True
    return False


def scan_network(ip_range, credentials):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–µ—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç RTSP-–ø–æ—Ä—Ç."""
    network = ipaddress.ip_network(ip_range, strict=False)
    print(f"\nüîç –°–∫–∞–Ω–∏—Ä—É—é {ip_range} ({network.num_addresses} IP)...")

    for ip in network.hosts():
        ip_str = str(ip)
        print(f"\n–ü—Ä–æ–≤–µ—Ä—è—é {ip_str}...")

        if not is_port_open(ip_str, RTSP_PORT):
            print(f"–ü–æ—Ä—Ç {RTSP_PORT} –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
            continue

        print(f"–ü–æ—Ä—Ç {RTSP_PORT} –æ—Ç–∫—Ä—ã—Ç! –ü—Ä–æ–±—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
        for username, password in credentials:
            if try_rtsp(ip_str, username, password):
                break  # –£—Å–ø–µ—Ö, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É IP


if __name__ == "__main__":
    os.makedirs(SCREENSHOTS_DIR, exist_ok=True)

    print("=== –°–∫–∞–Ω–µ—Ä IP-–∫–∞–º–µ—Ä ===")
    credentials = load_credentials()
    ip_range = input("–í–≤–µ–¥–∏—Ç–µ IP-–¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.0.0/24): ").strip()

    scan_network(ip_range, credentials)
    print("\n–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ:", SCREENSHOTS_DIR)